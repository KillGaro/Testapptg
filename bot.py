import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)
users_db = {}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def start(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    if user.id not in users_db:
        users_db[user.id] = {"balance": 1000, "level": 1}
    
    keyboard = [
        [InlineKeyboardButton("üé∞ –°–ª–æ—Ç—ã (—Å—Ç–∞–≤–∫–∞: 100$)", callback_data="slots")],
        [InlineKeyboardButton("‚öΩ –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –º–∞—Ç—á (—Å—Ç–∞–≤–∫–∞: 200$)", callback_data="sport")],
        [InlineKeyboardButton("üéØ –†—É–ª–µ—Ç–∫–∞ (—Å—Ç–∞–≤–∫–∞: 150$)", callback_data="roulette")],
        [InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    update.message.reply_text(
        f"üé© *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Lucky Jack Casino*, {user.first_name}!\n"
        f"–¢–≤–æ–π –±–∞–ª–∞–Ω—Å: *{users_db[user.id]['balance']} $LUCKY* ü™ô\n\n"
        "–í—ã–±–µ—Ä–∏ –∏–≥—Ä—É:",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

# –ò–≥—Ä–∞ –≤ —Å–ª–æ—Ç—ã
def slots(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    user_id = query.from_user.id
    
    if users_db[user_id]["balance"] < 100:
        query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –ú–∏–Ω–∏–º—É–º: 100$", show_alert=True)
        return
    
    # –ê–Ω–∏–º–∞—Ü–∏—è –±–∞—Ä–∞–±–∞–Ω–æ–≤
    symbols = ["üçí", "üçã", "üçä", "7Ô∏è‚É£", "üí∞"]
    msg = query.edit_message_text(text="üé∞ –ö—Ä—É—Ç–∏–º –±–∞—Ä–∞–±–∞–Ω—ã...\n\n[ üåÄ | üåÄ | üåÄ ]")
    
    import time, random
    for _ in range(3):
        time.sleep(0.5)
        slot1 = random.choice(symbols)
        slot2 = random.choice(symbols)
        slot3 = random.choice(symbols)
        msg.edit_text(f"üé∞ –ö—Ä—É—Ç–∏–º –±–∞—Ä–∞–±–∞–Ω—ã...\n\n[ {slot1} | {slot2} | {slot3} ]")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∏–≥—Ä—ã—à–∞
    if slot1 == slot2 == slot3:
        win = 500
        text = f"üéâ *–î–ñ–ï–ö–ü–û–¢!* +{win}$"
    elif slot1 == slot2 or slot2 == slot3:
        win = 200
        text = f"üî• *–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!* +{win}$"
    else:
        win = -100
        text = "üò¢ *–ü—Ä–æ–∏–≥—Ä—ã—à* -100$"
    
    users_db[user_id]["balance"] += win
    
    keyboard = [[InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="menu")]]
    msg.edit_text(
        f"{text}\n\n"
        f"–¢–≤–æ–π –±–∞–ª–∞–Ω—Å: *{users_db[user_id]['balance']} $LUCKY* ü™ô",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
def button_handler(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    data = query.data
    
    if data == "slots":
        slots(update, context)
    elif data == "menu":
        start(update, context)

def main() -> None:
    updater = Updater("–í–ê–®_TELEGRAM_BOT_TOKEN")
    dp = updater.dispatcher
    
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CallbackQueryHandler(button_handler))
    
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
